<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Declare variables

playerNum = -1;

kHorizontal  = 0;
kVertical    = 0;
kA           = 0;
kAHeld       = 0;
kB           = 0;
kBHeld       = 0;

vx = 0;
vy = 0;
cursorSpeed = 20;

selecting = -1;
hovering = -1;

xCenter = 0;
yCenter = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset input
kHorizontal  = 0;
kVertical    = 0;
kA           = 0;
kAHeld       = 0;
kB           = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/****************************************
 * Get input
 ****************************************/
 
kBHeld = 0;
if (playerNum != -1 ) {
    kStart       = gamepad_button_check_pressed(playerNum, gp_start);
    kHorizontal  = gamepad_axis_value          (playerNum, gp_axislh);
    kVertical    = gamepad_axis_value          (playerNum, gp_axislv);
    kA           = gamepad_button_check_pressed(playerNum, gp_face1);
    kAHeld       = gamepad_button_check        (playerNum, gp_face1);
    kB           = gamepad_button_check_pressed(playerNum, gp_face2);
    kBHeld       = gamepad_button_check        (playerNum, gp_face2);
}
else {
    for (var i = 0; i &lt; 4; i++) {
        if (gamepad_is_connected(i)){
            kHorizontal  +=          gamepad_axis_value          (i, gp_axislh);
            kVertical    +=          gamepad_axis_value          (i, gp_axislv);
            kA           = kA     || gamepad_button_check_pressed(i, gp_face1);
            kBHeld       = kBHeld || gamepad_button_check        (i, gp_face2);
        }
    }
}

/****************************************
 * Move cursor
 ****************************************/
if (abs(kHorizontal) &gt; oGame.rightThresh)
vx = Normalize(abs(kHorizontal)) * sign(kHorizontal) * cursorSpeed;
else vx = 0;

if(abs(kVertical) &gt; oGame.rightThresh)
vy = Normalize(abs(kVertical)) * sign(kVertical) * cursorSpeed;
else vy = 0; 

// Vertical
repeat(abs(vy)) {
    if ((y &gt; 0 || sign(vy) &gt; 0) &amp;&amp; (y &lt; room_height || sign(vy) &lt; 0))
        y += sign(vy);
    else {
        vy = 0;
        break;
    }
}

// Horizontal
repeat(abs(vx)) {
    
    if ((x &gt; 0 || sign(vx) &gt; 0) &amp;&amp; (x &lt; room_width || sign(vx) &lt; 0))
        x += sign(vx); 
    else {
        vx = 0;
        break;
    }
}

/****************************************
 * Change cursor appearance when selecting
 ****************************************/
if (kAHeld) image_index = 1;
else        image_index = 0;


/****************************************
 * Functionality of cursor
 ****************************************/
if (room == rmCharacterSelect) {
    switch(playerNum) {
        case 0:
            xCenter = 300;
            yCenter = 360;
            break;
        case 1:
            xCenter = 1680;
            yCenter = 280;
            break;
        case 2:
            xCenter = 240;
            yCenter = 860;
            break;
        case 3:
            xCenter = 1680;
            yCenter = 860;
            break;
        default:
            break;
    }
    
    // Not selected in yet
    if (selecting == -1) {
        
        hovering = -1;
        
        // Check where we are hovering the cursor
        for (var i = 0; i &lt; oGame.characterNum; i++) {
            if (place_meeting(x,y,oCharacterSelect.frame[i])) {
                
                // Hovering a thumbnail brings up a character avatar
                hovering = i;            
            
                if (kA) {
                        
                    // Add new selection
                    oCharacterSelect.numLockedIn++;
                    selecting = oCharacterSelect.frame[i];
                    oCharacterSelect.frame[i].selectArray[playerNum] = 1;
                    
                    // Add selection to oGame
                    oGame.characterSelected[playerNum] = selecting.frameNum; 
                    //oGame.characterSelected[playerNum] = characters.sawyer; //TODO remove this once all characters are implemeted
                    
                    // Play sound effect
                    audio_play_sound(mButtonPress,1,0);
                    break;
                }
            }
        }
    }
    
    // Character has been selected
    else {
        hovering = oGame.characterSelected[playerNum];
        if (kB) {
            selecting.selectArray[playerNum] = 0;
            selecting = -1;
            oCharacterSelect.numLockedIn--;
            
            // Remove selection from oGame
            oGame.characterSelected[playerNum] = -1;
            
            // Play sound effect
            audio_play_sound(mButtonChange,1,0);
        }
        if (kStart) {
            if (oCharacterSelect.numLockedIn == oGame.numPlayers) {
                oCharacterSelect.confirm = true;
                audio_play_sound(mButtonStart,1,0);
            }
        }
    }
    
    // Must hold back for a certain time before quitting
    if (kBHeld) {
        oGame.backTimer++
        if (oGame.backTimer &gt; oGame.backThresh) {
            audio_play_sound(mButtonChange,1,0);
            room_goto(rmMainMenu);
        }
    }
    else {
        for (var i = 0; i &lt; 4; i++) {
            if (gamepad_is_connected(i)){
                kBHeld       = kBHeld || gamepad_button_check        (i, gp_face2);
            }
        }
        if (!kBHeld) oGame.backTimer = 0;
    }
}

else if (room == rmStageSelect) {

    oStageSelect.hovering = -1;
    
    // Check if we are hovering over any stages
    for (var i = 0; i &lt; oGame.stageNum; i++) {
    
        if (place_meeting(x,y,oStageSelect.thumbnails[i])) {
            oStageSelect.hovering = i;
            
            // Highlight thumbnail if its available
            if (oStageSelect.thumbnails[i].available)
                oStageSelect.thumbnails[i].image_index = 1;
        }
    }
    
    if (kA) {
    
        for (var i = 0; i &lt; oGame.stageNum; i++) {
    
            if (place_meeting(x,y,oStageSelect.thumbnails[i])) {
            
                if (oStageSelect.thumbnails[i].available) { 
                    oStageSelect.confirm = i;
                    audio_play_sound(mButtonStart,1,0);
                }
            }
        }
    }
 
    // Must hold back for a certain time before quitting
    if (kBHeld) {
        oGame.backTimer++
        if (oGame.backTimer &gt; oGame.backThresh) {
            audio_play_sound(mButtonChange,1,0);
            room_goto(rmCharacterSelect);
        }
    }
    else {
        for (var i = 0; i &lt; 4; i++) {
            if (gamepad_is_connected(i)){
                kBHeld       = kBHeld || gamepad_button_check        (i, gp_face2);
            }
        }
        if (!kBHeld) oGame.backTimer = 0;
    }
    
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(hovering) {
    case -1:
        break;
    case characters.randomChar:
        draw_sprite(sRandomSplash, 0, xCenter, yCenter);
        break;
    case characters.jackson:
        draw_sprite(sJacksonSplash, 0, xCenter, yCenter);
        break;
    case characters.sawyer:
        draw_sprite(sSawyerSplash, 0, xCenter, yCenter);
        break;
    case characters.nolan:
        draw_sprite(sNolanSplash, 0, xCenter, yCenter);
        break;
    case characters.ali:
        draw_sprite(sAliSplash, 0, xCenter, yCenter);
        break;
    case characters.jason:
        draw_sprite(sJasonSplash, 0, xCenter, yCenter);
        break;
    case characters.ben:
        draw_sprite(sBenSplash, 0, xCenter, yCenter);
        break;
    case characters.hansen:
        draw_sprite(sHansenSplash, 0, xCenter, yCenter);
        break;
    case 8:
        break;
    default:
        break;
}
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
