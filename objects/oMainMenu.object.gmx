<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum buttons { 
    fight,
    settings,
    quit
}

// Reset player count for when backing out to main menu
oGame.numPlayers = 1;
oGame.characterSelected[3] = -1;
oGame.characterSelected[2] = -1;
oGame.characterSelected[1] = -1;
oGame.characterSelected[0] = -1;

buttonPressed = buttons.fight;
buttonPressedSubimage = 0;
change        = false;
cycling       = false;
scrollUp      = false;
scrollDown    = false;

duration = 30;
timerIn = 0;
timerOut = 0;
scale = 1;
alpha = 1;
x1 = 0;
x2 = 0;
x3 = 0;
fight = false;
settings = false;
quit = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cycling    = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Animate buttons in
timerIn++;

if (timerIn  &lt; duration) 
    x1 = easeOutCubic(timerIn, 0, 660, duration);
if (timerIn &gt; duration/3 &amp;&amp; timerIn &lt; duration * 4/3) 
    x2 = easeOutCubic(timerIn - duration/3  , 0, 660, duration);
if (timerIn &gt; duration * 2/3 &amp;&amp; timerIn &lt; duration * 5/3)
    x3 = easeOutCubic(timerIn - duration*2/3, 0, 660, duration);

// Animate buttons out
if (fight || settings || quit) {

    timerOut++;
    
    if (fight) {
        if (timerOut  &lt; duration) 
            x1 = easeOutCubic(timerOut, 660, 2400, duration);
        if (timerOut &gt; duration/3 &amp;&amp; timerOut &lt; duration * 4/3) 
            x2 = easeOutCubic(timerOut - duration/3  , 660, 2400, duration);
        if (timerOut &gt; duration * 2/3 &amp;&amp; timerOut &lt; duration * 5/3)
            x3 = easeOutCubic(timerOut - duration*2/3, 660, 2400, duration);
    }
    if (settings) {
        if (timerOut  &lt; duration) 
            x2 = easeOutCubic(timerOut, 660, 2400, duration);
        if (timerOut &gt; duration/3 &amp;&amp; timerOut &lt; duration * 4/3) 
            x1 = easeOutCubic(timerOut - duration/3  , 660, 2400, duration);
        if (timerOut &gt; duration * 2/3 &amp;&amp; timerOut &lt; duration * 5/3)
            x3 = easeOutCubic(timerOut - duration*2/3, 660, 2400, duration);
    }
    if (quit) {
        if (timerOut  &lt; duration) 
            x3 = easeOutCubic(timerOut, 660, 2400, duration);
        if (timerOut &gt; duration/3 &amp;&amp; timerOut &lt; duration * 4/3) 
            x2 = easeOutCubic(timerOut - duration/3  , 660, 2400, duration);
        if (timerOut &gt; duration * 2/3 &amp;&amp; timerOut &lt; duration * 5/3)
            x1 = easeOutCubic(timerOut - duration*2/3, 660, 2400, duration);
    }
    
    alpha -= 1/duration;
    scale -= 1/duration;
    
    if (timerOut == duration) {
        
        if (fight)    room_goto(rmCharacterSelect);
        if (settings) room_goto(rmSettingsMenu);
        if (quit)     game_end();
    }
}
else{
    
    // Only allow player who selected from start to control main menu
    // Return to main menu
    if (gamepad_button_check_pressed(oGame.mainPlayer, gp_face2)) {
        audio_play_sound(mButtonPress, 3, 0);
        room_goto(rmStartMenu);
        exit;
    }
    
    if (gamepad_axis_value(oGame.mainPlayer, gp_axislv) &lt; oGame.upThresh) { 
        if (!change) {
            change     = true;
            scrollUp = true;
            alarm[0]   = 20;
        } else if (cycling) {
            cycling    = false;
            alarm[0]   = 5;
            scrollUp = true;
        }
    }
    
    else if (gamepad_axis_value(oGame.mainPlayer, gp_axislv) &gt; oGame.downThresh) { 
        if (!change) {
            change   = true;
            scrollDown = true;
            alarm[0] = 20;
        } else if (cycling) {
            cycling  = false;
            alarm[0] = 5;
            scrollDown = true;
        }
    } 
    
    else { 
        change     = false;
        cycling    = false;
    }
    
    if (gamepad_button_check_pressed(oGame.mainPlayer, gp_face1)) {
        audio_play_sound(mButtonPress, 3, 0);
        switch (buttonPressed) {
            case buttons.fight:
                fight = true;
                break;
            case buttons.settings:
                settings = true;
                break;
            case buttons.quit:
                quit = true;
                break
            default:
                break;
        }
    }
    
    if (scrollUp) {
        scrollUp = false;
        audio_play_sound(mButtonChange, 1, 0);
        switch (buttonPressed) {
            case buttons.fight:
                buttonPressed = buttons.quit;
                break;
            case buttons.settings:
                buttonPressed = buttons.fight;
                break;
            case buttons.quit:
                buttonPressed = buttons.settings;
                break
            default:
                break;
        }
    } else if (scrollDown) {
        scrollDown = false;
        audio_play_sound(mButtonChange, 1, 0);
        switch (buttonPressed) {
            case buttons.fight:
                buttonPressed = buttons.settings;
                break;
            case buttons.settings:
                buttonPressed = buttons.quit;
                break;
            case buttons.quit:
                buttonPressed = buttons.fight;
                break
            default:
                break;
        }
    }
    
    buttonPressedSubimage += 0.1;
    if (buttonPressedSubimage &gt;= 6) buttonPressedSubimage = 0;

    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw background
draw_background(bgMainMenu,0,0);

// Draw floor
draw_sprite_ext(sMainMenuFloor, 0, room_width/2, room_height/2, 1, 1, 0, c_white, alpha);

// Draw buttons
switch (buttonPressed) {
    case buttons.fight:
        draw_sprite_ext(sButtonPressedFight,    floor(buttonPressedSubimage), x1, 336, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonSettings,        0,                            x2, 441, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonQuit,            0,                            x3, 546, 3, 3, 0, c_white, alpha);
        break;
    case buttons.settings:
        draw_sprite_ext(sButtonFight,           0,                            x1, 336, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonPressedSettings, floor(buttonPressedSubimage), x2, 441, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonQuit,            0,                            x3, 546, 3, 3, 0, c_white, alpha);
        break;
    case buttons.quit:
        draw_sprite_ext(sButtonFight,           0,                            x1, 336, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonSettings,        0,                            x2, 441, 3, 3, 0, c_white, alpha);
        draw_sprite_ext(sButtonPressedQuit,     floor(buttonPressedSubimage), x3, 546, 3, 3, 0, c_white, alpha);
        break;
    default:
        break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
