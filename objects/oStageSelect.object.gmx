<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oGame.backTimer = 0;

previewStartX = -976;
previewStartY = 200;
previewEndX = 130
previewEndY = 200;
thumbnailStartX = 1920;
thumbnailStartY = 200;
thumbnailEndX = 1190;
thumbnailEndY = 200;
thumbnailOffsetX = 216;
thumbnailOffsetY = 152;

thumbnailX = thumbnailStartX;
thumbnailY = thumbnailStartY;
previewX   = previewStartX;
previewY   = previewStartY;

timerIn = 0;
timerOut = 0;
duration = 30;
loadTime = 120;
confirm = -1;
hovering = 8;
alpha = 0;
next = -1;

/*
thumbnails[0] = 5;
thumbnails[1] = 5;
thumbnails[2] = 5 + thumbnailOffsetX * 1 + 5 * 1; 
thumbnails[3] = 5;
thumbnails[4] = 5 + thumbnailOffsetX * 2 + 5 * 2;
thumbnails[5] = 5;

thumbnails[6] = 5;
thumbnails[7] = 5 + thumbnailOffsetY * 1 + 5 * 1; 
thumbnails[8] = 5 + thumbnailOffsetX * 1 + 5 * 1;
thumbnails[9] = 5 + thumbnailOffsetY * 1 + 5 * 1; 
thumbnails[10] = 5 + thumbnailOffsetX * 2 + 5 * 2;
thumbnails[11] = 5 + thumbnailOffsetY * 1 + 5 * 1; 


thumbnails[12] = 5;
thumbnails[13] = 5 + thumbnailOffsetY * 2 + 5 * 2;
thumbnails[14] = 5 + thumbnailOffsetX * 1 + 5 * 1;
thumbnails[15] = 5 + thumbnailOffsetY * 2 + 5 * 2;
thumbnails[16] = 5 + thumbnailOffsetX * 2 + 5 * 2;
thumbnails[17] = 5 + thumbnailOffsetY * 2 + 5 * 2;
*/
thumbnails[0] = instance_create(-200,-200, oStageThumbnail);
thumbnails[1] = instance_create(-200,-200, oStageThumbnail);
thumbnails[2] = instance_create(-200,-200, oStageThumbnail);
thumbnails[3] = instance_create(-200,-200, oStageThumbnail);
thumbnails[4] = instance_create(-200,-200, oStageThumbnail);
thumbnails[5] = instance_create(-200,-200, oStageThumbnail);
thumbnails[6] = instance_create(-200,-200, oStageThumbnail);
thumbnails[7] = instance_create(-200,-200, oStageThumbnail);
thumbnails[8] = instance_create(-200,-200, oStageThumbnail);

thumbnails[0].thumbnailNum = 0;
thumbnails[1].thumbnailNum = 1;
thumbnails[2].thumbnailNum = 2;
thumbnails[3].thumbnailNum = 3;
thumbnails[4].thumbnailNum = 4;
thumbnails[5].thumbnailNum = 5;
thumbnails[6].thumbnailNum = 6;
thumbnails[7].thumbnailNum = 7;
thumbnails[8].thumbnailNum = 8;

// Some stages remain locked
thumbnails[0].available = true;
thumbnails[1].available = true;
thumbnails[2].available = true;
thumbnails[8].available = true;
stagesAvailable = 3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Animate frames in
timerIn++;

if (timerIn &lt; duration) {
    
    thumbnailX = easeOutCubic(timerIn, thumbnailStartX, thumbnailEndX - thumbnailStartX, duration);
    thumbnailY = easeOutCubic(timerIn, thumbnailStartY, thumbnailEndY - thumbnailStartY, duration);
    
    previewX = easeOutCubic(timerIn, previewStartX, previewEndX - previewStartX, duration);
    previewY = easeOutCubic(timerIn, previewStartY, previewEndY - previewStartY, duration);
}

// Make thumbnails follow frame
for (var i = 0; i &lt; 3; i++) {
    for (var j = 0; j &lt; 3; j++) {
        thumbnails[i + 3 * j].x = thumbnailX + 4 + thumbnailOffsetX * i + 4 * i;
        thumbnails[i + 3 * j].y = thumbnailY + 4 + thumbnailOffsetY * j + 4 * j;
    }
}

// Create cursor starting at random option
if (timerIn &gt; duration &amp;&amp; !instance_exists(oCursor)) CursorCreate(thumbnails[oGame.stageNum - 1].x + thumbnailOffsetX/2, thumbnails[oGame.stageNum - 1].y + thumbnailOffsetY/2, -1);



// Animate frames out
if (confirm != -1) {
    
    if (instance_exists(oCursor)) instance_destroy(oCursor);
    timerOut++;
    
    thumbnailX = easeOutCubic(timerIn, thumbnailEndX, thumbnailStartX - thumbnailEndX, duration);
    thumbnailY = easeOutCubic(timerIn, thumbnailEndY, thumbnailStartY - thumbnailEndY, duration);
    
    previewX   = easeOutCubic(timerIn, previewEndX, previewStartX - previewEndX, duration);
    previewY   = easeOutCubic(timerIn, previewEndY, previewStartY - previewEndY, duration);
    
    alpha = timerOut/duration;
    
    if (timerOut &gt; loadTime) {
        
        // Go to the selected stage
        switch (confirm) {
            case 8:
                confirm = irandom(stagesAvailable - 1);
                break;
            case 0:
                var xCenter = room_width/2;
                var yCenter = room_height/2 + 85;
                var roomHeight = 1080;
                var roomWidth = 1920;
                
                oGame.rightCamBoundary   = xCenter + 320;
                oGame.leftCamBoundary    = xCenter - 320;
                oGame.upperCamBoundary   = roomHeight/3;
                oGame.lowerCamBoundary   = roomHeight * 2/3;
                
                oGame.rightStageBoundary = xCenter + 450;
                oGame.leftStageBoundary  = xCenter - 450;
                oGame.upperStageBoundary = yCenter - 400;
                oGame.lowerStageBoundary = yCenter + 220;
                
                oGame.p1StartX = xCenter - 78;
                oGame.p1StartY = yCenter - 70;
                oGame.p2StartX = xCenter + 78;
                oGame.p2StartY = yCenter - 70;
                oGame.p3StartX = xCenter;
                oGame.p3StartY = yCenter - 125;
                oGame.p4StartX = xCenter;
                oGame.p4StartY = yCenter;
                oGame.zoomMin  = 250;
                oGame.respawnX = xCenter;
                oGame.respawnY = yCenter - 160;
                
                room_goto(rmStageApartment);
                break;
            case 1:
                var xCenter = 1920/2;
                var yCenter = 1080/2 + 71;
                var roomHeight = 1080;
                var roomWidth = 1920;
                
                oGame.rightCamBoundary   = xCenter + 320;
                oGame.leftCamBoundary    = xCenter - 320;
                oGame.upperCamBoundary   = roomHeight/3;
                oGame.lowerCamBoundary   = roomHeight * 2/3;
                
                oGame.rightStageBoundary = xCenter + 450;
                oGame.leftStageBoundary  = xCenter - 450;
                oGame.upperStageBoundary = yCenter - 400;
                oGame.lowerStageBoundary = yCenter + 220;
                
                oGame.p1StartX = xCenter - 140;
                oGame.p1StartY = yCenter;
                oGame.p2StartX = xCenter + 140;
                oGame.p2StartY = yCenter;
                oGame.p3StartX = xCenter - 70;
                oGame.p3StartY = yCenter;
                oGame.p4StartX = xCenter + 70;
                oGame.p4StartY = yCenter;
                oGame.zoomMin = 400;
                oGame.respawnX = xCenter;
                oGame.respawnY = yCenter - 100;
                
                room_goto(rmStageTheater);
                break;
            case 2:
                var xCenter = room_width/2;
                var yCenter = room_height/2 + 75;
                var roomHeight = 1080;
                var roomWidth = 1920;
                
                oGame.rightCamBoundary   = xCenter + 320;
                oGame.leftCamBoundary    = xCenter - 320;
                oGame.upperCamBoundary   = roomHeight/3;
                oGame.lowerCamBoundary   = roomHeight * 2/3;
                
                oGame.rightStageBoundary = xCenter + 450;
                oGame.leftStageBoundary  = xCenter - 450;
                oGame.upperStageBoundary = yCenter - 400;
                oGame.lowerStageBoundary = yCenter + 220;
                
                oGame.p1StartX = xCenter - 120;
                oGame.p1StartY = yCenter;
                oGame.p2StartX = xCenter + 120;
                oGame.p2StartY = yCenter;
                oGame.p3StartX = xCenter - 60;
                oGame.p3StartY = yCenter;
                oGame.p4StartX = xCenter + 60;
                oGame.p4StartY = yCenter;
                oGame.zoomMin  = 250;
                oGame.respawnX = xCenter;
                oGame.respawnY = yCenter - 120;
                
            
                room_goto(rmStageUlti);
                break;
            default:
                break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw background
draw_background(bgStageSelect,0,0);

draw_sprite_ext(sWhiteBg,0,0,0,1920,1080,0,c_white,alpha);

// Draw preview frame
draw_sprite_ext(sStagePreviewFrame,0,previewX,previewY,1,1,0,c_white,1);

// Draw thumbnail frame
draw_sprite_ext(sStageThumbnailFrame,0,thumbnailX,thumbnailY,1,1,0,c_white,1);

// Draw correct preview
switch (hovering) {
    case 0:
        draw_sprite_ext(sStagePreviewApartment,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 1:
        draw_sprite_ext(sStagePreviewTheater,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 2:
        draw_sprite_ext(sStagePreviewUlti,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 3:
        draw_sprite_ext(sStagePreviewLocked,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 4:
        draw_sprite_ext(sStagePreviewLocked,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 5:
        draw_sprite_ext(sStagePreviewLocked,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 6:
        draw_sprite_ext(sStagePreviewLocked,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 7:
        draw_sprite_ext(sStagePreviewLocked,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    case 8:
        draw_sprite_ext(sStagePreviewRandom,0,previewX + 5, previewY + 5,1,1,0,c_white,1);
        break;
    default:
        break;
}
    
draw_sprite(sBackArrow, oGame.backTimer/2, 350, 32);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
