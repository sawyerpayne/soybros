<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/**************************************
 * Begin stage specific audio
 *************************************/
audio_stop_all();
switch(room) {
    case rmStageUlti:
        audio_play_sound(mUltimateTheme, 0, 1);
        break;
    case rmStageTraining:
        audio_play_sound(mMenuTheme, 0, 1);
        break;
    case rmStageTheater:
        audio_play_sound(mTheaterTheme,0,1);
        break;
    case rmStageApartment:
        audio_play_sound(mApartmentTheme2,0,0);
        alarm[0] = room_speed * audio_sound_length(mApartmentTheme2);
        break;
    default:
        break;
}
frameRate = 0.417;
frame = 0;
playerID[4] = -1;
playerID[3] = -1;
playerID[2] = -1;
playerID[1] = -1;

// Stage parameters
xCenter  = room_width/2;
yCenter  = room_height/2;

// Center of mass
xCOM     = 0;
yCOM     = 0;
comOffset = 16;

// Zoom parameters
xMax     = 0;
yMax     = 0;

// Create players 
for (var i = 0; i &lt; oGame.numPlayers; i++) {

    // Deal with random character selection
    var character;
    if (oGame.characterSelected[i] == 0) character = irandom(oGame.characterNum-1)+1;
    else character = oGame.characterSelected[i];
    
    playerID[i] = SpawnCharacter(i,i,character, oGame.stockCount);
    xCOM += playerID[i].x;
    yCOM += playerID[i].y;
}
/*
oGame.numPlayers++;
playerID[1] = SpawnCharacter(1,1,characters.jackson, oGame.stockCount);
    xCOM += playerID[1].x;
    yCOM += playerID[1].y;
*/
// Calculate center of mass
xCOM /= oGame.numPlayers;
yCOM /= oGame.numPlayers;

// Camera
view_xview[0] = xCenter - view_wview[0]/2;
view_yview[0] = yCenter - view_hview[0]/2;
viewRatio = view_wview[0] / view_hview[0];  // View ration ensures width and height will scale proportionally

// Panning parameters
xCamera = view_xview[0] + view_wview[0]/2;
yCamera = view_yview[0] + view_hview[0]/2;
panSpeed = 0.6;                             // Must be between 0 and 1; the larger the faster the pan speed

// Zoom parameters
xZoom = xCamera;
yZoom = yCamera;
zoomOutSpeed = 0.6;                                         // Must be between 0 and 1; the larger the faster the zoom out speed
zoomInSpeed = 0.8;                                          // Must be between 0 and 1; the larger the faster the zoom out speed
zoomOutBoundary = 0.5;                                      // Must be between 0 and 1; the larger the closer to the edge the player must travel before zooming out
zoomMax = oGame.rightCamBoundary - oGame.leftCamBoundary;
zoomMin = oGame.zoomMin;
xZoomOut = zoomOutBoundary * view_wview[0];
yZoomOut = zoomOutBoundary * view_hview[0];
zoomInBoundary = 0.25;                                        // Must be between 0 and 1; the smaller the closer to the center the player must travel before zooming in
xZoomIn = zoomInBoundary * view_wview[0];
yZoomIn = zoomInBoundary * view_hview[0];







</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(mApartmentTheme2,0,0);
alarm[0] = room_speed * audio_sound_length(mApartmentTheme2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(mApartmentTheme1,0,0);
alarm[1] = room_speed * audio_sound_length(mApartmentTheme1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera control

/*
 * Allow switch to full stage view in debug mode
 */
if(oGame.debug &amp;&amp; keyboard_check_pressed(ord("D"))) {
    view_visible[0] = !view_visible[0];
    view_visible[1] = !view_visible[1];
}

frame += frameRate;

// Calculate center of mass using all players' coordinates and check for (x, y) min / max 
xCOM = 0;
yCOM = 0;

xMax = 0;
yMax = 0;

for (var i = 0; i &lt; oGame.numPlayers; i++)
{
    if(instance_exists(playerID[i])) {
        xCOM += playerID[i].x;
        yCOM += playerID[i].y - comOffset;
        
        if (abs(playerID[i].x - xZoom) &gt; xMax)
        {
            xMax = abs(playerID[i].x - xZoom);
        }
        
        if (abs(playerID[i].y - comOffset - yZoom) &gt; yMax)
        {
            yMax = abs(playerID[i].y - comOffset - yZoom);
        }
    }
}

// Camera Zooming
    // Zoom out
if (!point_in_rectangle(xMax, yMax, 0, 0, xZoomOut/2, yZoomOut/2))
{
    if (xMax &gt;= xZoomOut/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_wview[0] = median(zoomMin, zoomMax, zoomOutSpeed * zoomOutSpeed * zoomOutSpeed * (xMax - xZoomOut/2)/2 + view_wview[0]);
        view_hview[0] = view_wview[0] / viewRatio;
    }
    if (yMax &gt;= yZoomOut/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_hview[0] = median(zoomMin / viewRatio, zoomMax / viewRatio, zoomOutSpeed * zoomOutSpeed * zoomOutSpeed * (yMax - yZoomOut/2)/2 + view_hview[0]);
        view_wview[0] = view_hview[0] * viewRatio;
    }
    
    zoomInitial = view_wview[0];
    zoomCurrent = zoomInitial;
}

    // Zoom in
else if (point_in_rectangle(xMax, yMax, 0, 0, xZoomIn/2, yZoomIn/2))
{
    if (xMax / xZoomIn/2 &gt;= yMax / yZoomIn/2)
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_wview[0] = median(zoomMin, zoomMax, zoomInSpeed * zoomInSpeed * zoomInSpeed * (xMax - xZoomIn/2)/2 + view_wview[0]);
        view_hview[0] = view_wview[0] / viewRatio;
    }
    else
    {
        // Modified cubic easing in/out from http://gizma.com/easing/
        view_hview[0] = median(zoomMin / viewRatio, zoomMax / viewRatio, zoomInSpeed * zoomInSpeed * zoomInSpeed * (yMax - yZoomIn/2)/2 + view_hview[0]);
        view_wview[0] = view_hview[0] * viewRatio;
    }
}

// Update zoom boundaries to reflect changes in view size
xZoomOut = zoomOutBoundary * view_wview[0];
yZoomOut = zoomOutBoundary * view_hview[0];
xZoomIn = zoomInBoundary * view_wview[0];
yZoomIn = zoomInBoundary * view_hview[0];

// Center of mass
xCOM /= oGame.numPlayers;
yCOM /= oGame.numPlayers;

// Center if everyone is dead
if (xCOM == 0 &amp;&amp; yCOM == 0){
    xCOM = 960;
    yCOM = 540;
}

// Add offset to be above all players
else {
    yCOM -= 32;
}

// Camera position
    // Modified cubic easing in/out from http://gizma.com/easing/
xCamera = panSpeed * panSpeed * panSpeed * (xCOM - xCamera)/2 + xCamera;
yCamera = panSpeed * panSpeed * panSpeed * (yCOM - yCamera)/2 + yCamera;





view_xview = xCamera - view_wview[0]/2;
view_yview = yCamera - view_hview[0]/2;

xZoom = view_xview[0] + view_wview[0]/2;
yZoom = view_yview[0] + view_hview[0]/2;

/*
// Make sure we don't exceed boundary
if (xCamera - view_wview[0]/2 &lt; 50) {
    xCamera = 50 + view_wview[0]/2;
}
else if (xCamera + view_wview[0]/2 &gt; room_width - 50) {
    xCamera = room_width - 50 - view_wview[0]/2;
}
if (yCamera - view_hview[0]/2 &lt; 50) {
    yCamera = 50 + view_hview[0]/2;
}
else if (yCamera + view_hview[0]/2 &gt; room_height - 50) {
    yCamera = room_height - 50 - view_hview[0]/2;
}
*/

view_xview[0] = median(oGame.leftCamBoundary,  oGame.rightCamBoundary - view_wview[0], view_xview[0]);
view_yview[0] = median(oGame.upperCamBoundary, oGame.lowerCamBoundary - view_hview[0], view_yview[0]);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Background control

if (room == rmStageUlti || room == rmTest){
    background_hspeed[0] = -0.3;
    background_hspeed[1] = -1;
    background_hspeed[2] = -4;
    background_hspeed[3] = -7;
    background_hspeed[4] = -10;
    background_hspeed[5] = -13;
    background_hspeed[6] = -16;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gameplay control
if (keyboard_check_pressed(ord("R"))){
    room_restart();
}

if (keyboard_check_pressed(vk_escape))
    game_end();


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debugging

if (oGame.debug) {
    if (keyboard_check_pressed(ord("1"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.jackson, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.jackson, 3);
    }
    else if (keyboard_check_pressed(ord("2"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.sawyer, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.sawyer, 3);
    }
    else if (keyboard_check_pressed(ord("3"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.nolan, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.nolan, 3);
    }
    
    else if (keyboard_check_pressed(ord("4"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.jason, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.jason, 3);
    }
    
    else if (keyboard_check_pressed(ord("5"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.ali, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.ali, 3);
    }
    
    else if (keyboard_check_pressed(ord("6"))){
        // Remove old player obj
        if instance_exists(playerID[0].hurtbox)       instance_destroy(playerID[0].hurtbox);
        if instance_exists(playerID[0].ledgeboxRear)  instance_destroy(playerID[0].ledgeboxRear);
        if instance_exists(playerID[0].ledgeboxFront) instance_destroy(playerID[0].ledgeboxFront);
        if (playerID[0].hitbox)        instance_destroy(playerID[0].hitbox);
        instance_destroy(playerID[0]);
        // Remove old player obj
        if instance_exists(playerID[1].hurtbox)       instance_destroy(playerID[1].hurtbox);
        if instance_exists(playerID[1].ledgeboxRear)  instance_destroy(playerID[1].ledgeboxRear);
        if instance_exists(playerID[1].ledgeboxFront) instance_destroy(playerID[1].ledgeboxFront);
        if (playerID[1].hitbox)        instance_destroy(playerID[1].hitbox);
        instance_destroy(playerID[1]);
        playerID[0] = SpawnCharacter(0, -1, characters.ben, 3);
        playerID[1] = SpawnCharacter(1, -1, characters.ben, 3);
    }
    
    if (keyboard_check(vk_add)) {
        playerID[0].percent++;
    }
    else if (keyboard_check(vk_subtract)) {
        playerID[0].percent--;
    }

    
    if (keyboard_check(vk_right)) {
        playerID[1].percent++;
    }
    else if (keyboard_check(vk_left)) {
        playerID[1].percent--;
    }

}

if (keyboard_check(ord("M"))) {
        room_goto(rmCharacterSelect);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_text(16, 16, "numA:" + string(playerID[0].numA));

for (var i = 0; i &lt; 4; i++;)
{
var xx = 16;
var yy = 48 + 160*i;
if gamepad_is_connected(i)
    {
    draw_text(xx, yy, "Gamepad Slot - " + string(i));
    draw_text(xx, yy + 20, "Gamepad Type - " + string(gamepad_get_description(i)));
    draw_text(xx, yy + 40, "Left H Axis - " + string(gamepad_axis_value(i, gp_axislh)));
    draw_text(xx, yy + 60, "Left V Axis - " + string(gamepad_axis_value(i, gp_axislv)));    
    draw_text(xx, yy + 80, "Right H Axis - " + string(gamepad_axis_value(i, gp_axisrh)));
    draw_text(xx, yy + 100, "Right V Axis - " + string(gamepad_axis_value(i, gp_axisrv)));   
    draw_text(xx, yy + 120, "Fire Rate - " + string(gamepad_button_value(i, gp_shoulderrb)));
    }
else
    {
    draw_text(xx, yy, "Gamepad Slot - " + string(i));
    draw_text(xx, yy + 20, "Gamepad not connected" + string(gamepad_get_description(i)));
    }
}

draw_set_font(fontPercent);
draw_set_colour(c_white);

// Draw percent and stocks at bottom of screen
for (var i = 0; i &lt; oGame.numPlayers; i++) {
    if (instance_exists(playerID[i])) {
        draw_text(1920/5 * (i+1),900,string(playerID[i].percent));
        for (var j = 0; j &lt; playerID[i].stocks; j++){
            draw_sprite_ext(sStockIcons,i,1920/5 * (i+1) + 30 * j, 1000, 3, 3, 0, c_white, 1);
        }
    }
}
draw_set_font(fontText);
draw_set_colour(c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (oGame.debug) {
    var X1 = xZoom - xZoomOut/2,
        Y1 = yZoom - yZoomOut/2,
        X2 = xZoom + xZoomOut/2,
        Y2 = yZoom + yZoomOut/2,
    
    draw_set_colour(c_blue);
    lineWidth = 1;
    
    draw_line_width(X1, Y1, X2, Y1, lineWidth);
    draw_line_width(X1, Y1, X1, Y2, lineWidth);
    draw_line_width(X2, Y1, X2, Y2, lineWidth);
    draw_line_width(X1, Y2, X2, Y2, lineWidth);
    
    // Zoom in boundary
    
    var X1 = xZoom - xZoomIn/2,
        Y1 = yZoom - yZoomIn/2,
        X2 = xZoom + xZoomIn/2,
        Y2 = yZoom + yZoomIn/2,
    
    draw_set_colour(c_red);
    
    draw_line_width(X1, Y1, X2, Y1, lineWidth);
    draw_line_width(X1, Y1, X1, Y2, lineWidth);
    draw_line_width(X2, Y1, X2, Y2, lineWidth);
    draw_line_width(X1, Y2, X2, Y2, lineWidth);
    
    
    draw_set_color(c_red);
    draw_circle(xCamera,yCamera,3,0);
    draw_set_color(c_blue);
    draw_circle(xCOM,yCOM,3,0);
    draw_set_color(c_black);
    
    
    var X1 = oGame.leftCamBoundary,
        Y1 = oGame.upperCamBoundary,
        X2 = oGame.rightCamBoundary,
        Y2 = oGame.lowerCamBoundary;
        
    draw_set_colour(c_black);
    lineWidth = 1;
    
    draw_line_width(X1, Y1, X2, Y1, lineWidth);
    draw_line_width(X1, Y1, X1, Y2, lineWidth);
    draw_line_width(X2, Y1, X2, Y2, lineWidth);
    draw_line_width(X1, Y2, X2, Y2, lineWidth);
    
    var X1 = oGame.leftStageBoundary,
        Y1 = oGame.upperStageBoundary,
        X2 = oGame.rightStageBoundary,
        Y2 = oGame.lowerStageBoundary;
    
    draw_set_colour(c_black);
    
    draw_line_width(X1, Y1, X2, Y1, lineWidth);
    draw_line_width(X1, Y1, X1, Y2, lineWidth);
    draw_line_width(X2, Y1, X2, Y2, lineWidth);
    draw_line_width(X1, Y2, X2, Y2, lineWidth);
    
    draw_set_color(c_black);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
