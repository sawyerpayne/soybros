<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup variables

/*
 * Toggle debug controls
 */
debug = false;

display_set_gui_maximise();

/*
 * Set gamepad deadzones
 */
if gamepad_is_connected(0) gamepad_set_axis_deadzone(0,0.05);
if gamepad_is_connected(1) gamepad_set_axis_deadzone(1,0.05);
if gamepad_is_connected(2) gamepad_set_axis_deadzone(2,0.05);
if gamepad_is_connected(3) gamepad_set_axis_deadzone(3,0.05);

/*
 * Set gamepad input thresholds
 */
rightThresh      = 0.3; //0.5
leftThresh       = -0.3; //0.5
rightSmashThresh =  0.99;
leftSmashThresh  = -0.99;
upSmashThresh    = -0.99;
downSmashThresh  =  0.99
downThresh       = 0.3; //0.5
upThresh         = -0.3; //0.5
crouchThresh     = 0.9;
jumpThresh       = -0.9;
smashThresh      = 0.99;
smashFrames      = 3;
shieldThresh     = 0.3;

/*
 * Set gameplay constants
 */
hitboxScale            = 100;
getUpTimer             = 120;
chargeTimer            = 60;
groundedFrames         = 60;
flinchThresh           = 0;
tumbleThresh           = 80;
maxShieldStrength      = 50;
shieldResetValue       = 30;
shieldDepletionRate    = 0.28;
shieldRegenerationRate = 0.07;
shieldDamageRatio      = 0.7;
respawnTimer           = 180;
stockCount             = 3;

/*
 * Set menu constants
 */
audio_sound_gain(mButtonChange, 0.4, 0);
backTimer            = 0;
backThresh           = 60;
mainPlayer           = -1;   // The person that can control the menu
numPlayers           = 1;    // Number of players currently playing
characterNum         = 8;    // Total number of characters (to display thumbnails)
stageNum             = 9;    // Total number of stages (to display thumbnails)
characterSelected[3] = -1;
characterSelected[2] = -1;
characterSelected[1] = -1;
characterSelected[0] = -1;

/*
 * Declare stage variables
 */
rightCamBoundary   = 0;
leftCamBoundary    = 0;
upperCamBoundary   = 0;
lowerCamBoundary   = 0;
rightStageBoundary = 0;
leftStageBoundary  = 0;
upperStageBoundary = 0;
lowerStageBoundary = 0;
zoomMin = 0;
p1StartX = 0;
p1StartY = 0;
p2StartX = 0;
p2StartY = 0;
p3StartX = 0;
p3StartY = 0;
p4StartX = 0;
p4StartY = 0;
respawnX = 0;
respawnY = 0;

/* 
 * Code to allow starting on rmTest 
 */
if (debug) {
    numPlayers = 2;
    characterSelected[1] = characters.jackson;
    characterSelected[0] = characters.sawyer;
    var xCenter = 980;
                    var yCenter = 615;
                    var roomHeight = 1080;
                    var roomWidth = 1920;
                    
                    oGame.rightCamBoundary   = xCenter + 320;
                    oGame.leftCamBoundary    = xCenter - 320;
                    oGame.upperCamBoundary   = roomHeight/3;
                    oGame.lowerCamBoundary   = roomHeight * 2/3;
                    
                    oGame.rightStageBoundary = xCenter + 450;
                    oGame.leftStageBoundary  = xCenter - 450;
                    oGame.upperStageBoundary = yCenter - 400;
                    oGame.lowerStageBoundary = yCenter + 220;
                    
                    oGame.p1StartX = xCenter - 120;
                    oGame.p1StartY = yCenter;
                    oGame.p2StartX = xCenter + 120;
                    oGame.p2StartY = yCenter;
                    oGame.p3StartX = xCenter - 60;
                    oGame.p3StartY = yCenter;
                    oGame.p4StartX = xCenter + 60;
                    oGame.p4StartY = yCenter;
                    oGame.zoomMin  = 250;
                    oGame.respawnX = xCenter;
                    oGame.respawnY = yCenter - 120;
                    if debug room_goto(rmTest);
}
/*******************************************************************/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Enums

// States
enum states {
    idle,
    walking,
    dashing,
    running,
    jumping,
    airborne,
    hitstun,
    helpless,
    shielding,
    dodging,
    rolling,
    airDodging,
    holding,
    held,
    throwing,
    dead,
    crouching,
    crawling,
    turning,
    tiltTurning,
    smashTurning,
    runTurning,
    skidding,
    hitlag,
    flinching,
    tumbling,
    grounded,
    landing,
    grabbing,
    countering,
    counterAttacking,
    ledgeGrabbing,
    gettingUp,
    
    fTilt,
    dTilt,
    uTilt,
    
    dashAttacking,
    attacking,
    getUpAttacking,
    
    fAir,
    dAir,
    bAir,
    uAir,
    nAir,
    
    fSmash,
    dSmash,
    uSmash,
    
    fCharge,
    dCharge,
    uCharge,
    
    fSpecial,
    dSpecial,
    uSpecial,
    special
    
}

enum characters {
    randomChar,
    jackson,
    sawyer,
    ali,
    nolan,
    jason,
    ben,
    hansen
}

enum knockback {
    none,
    fixed,
    scaling
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Particles

// Define particle system
particleSystem = part_system_create();
part_system_depth(particleSystem, -10);

// Bubble particle
bubbles = part_type_create();
part_type_shape(bubbles,pt_shape_ring);
part_type_size(bubbles, 0.002, 0.02, 0.002, 0);
part_type_speed(bubbles,0.25, 0.5, 0, 0);
part_type_direction(bubbles,90,90,0,0);
part_type_life(bubbles,10,60);

// Spark particle
spark = part_type_create();
part_type_shape(spark,pt_shape_spark);
part_type_size(spark,1.50,1.50,0,0);
part_type_scale(spark,1/3,1/3);
part_type_color1(spark,8454143);
part_type_alpha1(spark,1);
part_type_direction(spark,0,359,0,0);
part_type_gravity(spark,0,270);
part_type_orientation(spark,0,0,0,0,1);
part_type_blend(spark,1);
part_type_life(spark,10,10);

// Flare particle
flare = part_type_create();
part_type_shape(flare,pt_shape_flare);
part_type_size(flare,1.50,1.50,0,0);
part_type_scale(flare,1/3,1/3);
part_type_color1(flare,16777215);
part_type_alpha1(flare,1);
part_type_direction(flare,0,359,0,0);
part_type_gravity(flare,0,270);
part_type_orientation(flare,0,0,0,0,1);
part_type_blend(flare,1);
part_type_life(flare,10,10);





// Cloud particle
cloud = part_type_create();
part_type_shape(cloud,pt_shape_explosion);
part_type_size(cloud,0.70,0.70,0.01,0);
part_type_scale(cloud,1/3,1/3);
part_type_color1(cloud,12632256);
part_type_alpha1(cloud,0.10);
part_type_speed(cloud,0.5,0.5,0,0);
part_type_direction(cloud,0,359,0,0);
part_type_gravity(cloud,0,270);
part_type_orientation(cloud,0,0,0,0,1);
part_type_blend(cloud,1);
part_type_life(cloud,30,45);

// Skid particle
skid = part_type_create();
part_type_shape(skid,pt_shape_explosion);
part_type_size(skid,0.50,0.50,0,0);
part_type_scale(skid,1/3,1/3);
part_type_color1(skid,c_gray);
part_type_alpha1(skid,0.5);
part_type_speed(skid,0,1,0,0);
part_type_direction(skid,0,180,0,0);
part_type_orientation(skid,45,45,0,0,1);
part_type_blend(skid,1);
part_type_life(skid,10,10);

// Shield particle 1

shieldParticle1 = part_type_create();
part_type_shape(shieldParticle1,pt_shape_ring);
part_type_size(shieldParticle1,1,1,-0.01,0);
part_type_scale(shieldParticle1,2/3,2/3);
part_type_color2(shieldParticle1,c_red, c_white);
part_type_alpha2(shieldParticle1,0.6, 0.01);
part_type_blend(shieldParticle1,1);
part_type_life(shieldParticle1,2,2);

shieldParticle2 = part_type_create();
part_type_shape(shieldParticle2,pt_shape_ring);
part_type_size(shieldParticle2,1,1,-0.01,0);
part_type_scale(shieldParticle2,2/3,2/3);
part_type_color2(shieldParticle2,c_blue, c_white);
part_type_alpha2(shieldParticle2,0.6, 0.01);
part_type_blend(shieldParticle2,1);
part_type_life(shieldParticle2,2,2);

shieldParticle3 = part_type_create();
part_type_shape(shieldParticle3,pt_shape_ring);
part_type_size(shieldParticle3,1,1,-0.01,0);
part_type_scale(shieldParticle3,2/3,2/3);
part_type_color2(shieldParticle3,c_green, c_white);
part_type_alpha2(shieldParticle3,0.6, 0.01);
part_type_blend(shieldParticle3,1);
part_type_life(shieldParticle3,2,2);

shieldParticle4 = part_type_create();
part_type_shape(shieldParticle4,pt_shape_ring);
part_type_size(shieldParticle4,1,1,-0.01,0);
part_type_scale(shieldParticle4,2/3,2/3);
part_type_color2(shieldParticle4,c_purple, c_white);
part_type_alpha2(shieldParticle4,0.6, 0.01);
part_type_blend(shieldParticle4,1);
part_type_life(shieldParticle4,2,2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gamepad load and remove code

show_debug_message("Event = " + async_load[? "event_type"]);        // Debug cocde so you can see which event has been
show_debug_message("Pad = " + string(async_load[? "pad_index"]));   // triggered and the pad associated with it.

switch(async_load[? "event_type"])             // Parse the async_load map to see which event has been triggered
{
case "gamepad discovered":                     // A game pad has been discovered
    var pad = async_load[? "pad_index"];       // Get the pad index value from the async_load map
    gamepad_set_axis_deadzone(pad, 0.5);       // Set the "deadzone" for the axis
    gamepad_set_button_threshold(pad, 0.1);    // Set the "threshold" for the triggers
    show_debug_message("New controller in slot: " + string(pad));
    break;
    
case "gamepad lost":                           // Gamepad has been removed or otherwise disabled
    var pad = async_load[? "pad_index"];       // Get the pad index
    show_debug_message("Controller lost in slot: " + string(pad));
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
